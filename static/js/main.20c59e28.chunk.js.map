{"version":3,"sources":["styles/globalStyles.tsx","components/Intro.tsx","components/ParticlesComponent.tsx","pages/Home.tsx","styles/TextIconButton.tsx","components/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rootColors","orange","codeColor","backgroundColor","white","GlobalStyle","createGlobalStyle","rgba","darken","HiMyName","styled","p","MyName","Me","Description","Intro","ParticlesStyle","div","Particles","lazy","particlesParams","interactivity","events","onHover","enable","mode","resize","particles","line_linked","collisions","number","value","shape","type","character","font","weight","style","color","size","random","FullPageLazyParticles","fallback","width","height","params","Experience","AboutMe","SectionStyle","PositionStyle","AboutMeFunction","id","className","ExperienceFunction","Home","triggerOnce","duration","TextIconButton","button","NavBarSpace","navBarItems","to","icon","faHome","description","key","faUserCircle","faLaptopCode","NavBar","map","item","smooth","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20c59e28.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\nimport { darken, rgba } from 'polished'\n\nexport const rootColors = {\n    orange: '#ffa200',\n    codeColor: '#64ffdb',\n    backgroundColor: '#001a30',\n    white: '#FFFFFF',\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    --font-sans: 'Calibre', 'San Francisco', 'SF Pro Text', -apple-system, system-ui, sans-serif;\n    --font-mono: 'SF Mono', 'Fira Code', 'Fira Mono', 'Roboto Mono', monospace;\n\n    --white: #FFF;\n\n    --fz-sm: 16px;\n    --fz-md: 20px;\n    --fz-lg: 24px;\n    --fz-xl: 32px;\n    --fz-2xl: 64px;\n  }\n\n  ::-webkit-scrollbar {\n    width: 4px;\n    height: 4px;\n  }\n\n  ::-webkit-scrollbar-button {\n    width: 0;\n    height: 0;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${rgba(rootColors.orange, 0.9)};\n    border: 0;\n    border-radius: 50px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: ${rgba(rootColors.orange, 1)};\n  }\n\n  ::-webkit-scrollbar-thumb:active {\n    background: ${darken(0.2, rgba(rootColors.orange, 1))};\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #666666;\n    border: 0 none #ffffff;\n    border-radius: 50px;\n  }\n\n  ::-webkit-scrollbar-corner {\n    background: transparent;\n  }\n\n  body {\n    margin: 0;\n    font-family: var(--font-sans);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: ${rgba(rootColors.backgroundColor, 1)};\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n  }\n`\n\nexport default GlobalStyle\n","import styled from 'styled-components'\nimport { rootColors } from '../styles/globalStyles'\nimport { rgba } from 'polished'\n\nconst HiMyName = styled.p`\n    color: ${rgba(rootColors.codeColor, 1)};\n    font-size: clamp(var(--fz-sm), 5vw, var(--fz-md));\n    max-width: 400px;\n`\n\nconst MyName = styled.p`\n    color: ${rgba(rootColors.orange, 1)};\n    font-size: clamp(var(--fz-xl), 5vw, var(--fz-2xl));\n    font-weight: bold;\n    margin: 2vh 0;\n`\n\nconst Me = styled(MyName)`\n    color: #80b3e0;\n`\n\nconst Description = styled(HiMyName)`\n    color: #4b92d1;\n    line-height: 1.5;\n`\n\nexport default function Intro() {\n    return (\n        <>\n            <HiMyName>Hi, my name is</HiMyName>\n            <MyName>Jay Patel</MyName>\n            <Me>I help build and protect the web.</Me>\n            <Description>\n                I am currently a Software Development Engineer I at Amazon based\n                in New York. I specialize in building, designing, testing,\n                probing websites, infrastructure, and more.\n            </Description>\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport { IParticlesParams } from 'react-particles-js'\nimport { lazy, Suspense } from 'react'\n\nexport const ParticlesStyle = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: -1;\n`\n\nconst Particles = lazy(() => import('react-particles-js'))\n\nexport const particlesParams: IParticlesParams = {\n    interactivity: {\n        events: {\n            onHover: {\n                enable: true,\n                mode: 'repulse',\n            },\n            resize: true,\n        },\n    },\n    particles: {\n        line_linked: {\n            enable: false,\n        },\n        collisions: {\n            enable: true,\n            mode: 'bounce',\n        },\n        number: {\n            value: 60,\n        },\n        shape: {\n            type: 'character',\n            character: {\n                value: ['0', '1'],\n                font: 'Verdana',\n                weight: '400',\n                style: '',\n            },\n        },\n        color: {\n            value: '#64ffda',\n        },\n        size: {\n            value: 10,\n            random: false,\n        },\n    },\n}\nexport default function FullPageLazyParticles() {\n    return (\n        <Suspense fallback={<div>Background Loading...</div>}>\n            <ParticlesStyle>\n                <Particles\n                    width=\"100vw\"\n                    height=\"100vh\"\n                    params={particlesParams}\n                />\n            </ParticlesStyle>\n        </Suspense>\n    )\n}\n","import Intro from '../components/Intro'\nimport styled from 'styled-components'\nimport { Fade } from 'react-awesome-reveal'\nimport FullPageLazyParticles from '../components/ParticlesComponent'\nimport { lazy, Suspense } from 'react'\nimport { rgba } from 'polished'\nimport { rootColors } from '../styles/globalStyles'\n\nconst Experience = lazy(() => import('../components/Experience'))\nconst AboutMe = lazy(() => import('../components/AboutMe'))\n\nconst SectionStyle = styled.div`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    @media only screen and (min-width: 768px) {\n        width: 80vw;\n    }\n`\n\nconst PositionStyle = styled.div`\n    .center {\n        width: 99.5vw;\n        place-items: center;\n    }\n\n    .padding {\n        padding: 3vh 3vw;\n    }\n\n    .background {\n        background: ${rgba(rootColors.backgroundColor, 1)};\n    }\n\n    .mw800 {\n        width: min(95vw, 800px);\n    }\n`\n\nfunction AboutMeFunction() {\n    return (\n        <Suspense fallback={<p>Loading About Me</p>}>\n            <SectionStyle id=\"about_me\" key=\"about_me\" className={'center'}>\n                <div className={'background padding mw800'}>\n                    <AboutMe />\n                </div>\n            </SectionStyle>\n        </Suspense>\n    )\n}\n\nfunction ExperienceFunction() {\n    return (\n        <Suspense fallback={<p>Loading My Experience</p>}>\n            <SectionStyle id=\"experience\" key=\"experience\" className={'center'}>\n                <div className={'background padding mw800'}>\n                    <Experience />\n                </div>\n            </SectionStyle>\n        </Suspense>\n    )\n}\n\nexport default function Home() {\n    return (\n        <>\n            <FullPageLazyParticles />\n            <Fade triggerOnce duration={2000}>\n                <PositionStyle>\n                    <SectionStyle id=\"intro\" key=\"intro\">\n                        <div className={'background padding'}>\n                            <Intro />\n                        </div>\n                    </SectionStyle>\n                    <AboutMeFunction />\n                    <ExperienceFunction />\n                </PositionStyle>\n            </Fade>\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport { rootColors } from './globalStyles'\nimport { rgba } from 'polished'\n\nconst TextIconButton = styled.button`\n    text-decoration: none;\n    cursor: pointer;\n    background: none;\n    border: 0;\n    outline: none;\n    color: var(--white);\n    font-size: clamp(var(--fz-md), 5vw, var(--fz-lg));\n    transition: color 1s ease;\n\n    :hover {\n        color: ${rgba(rootColors.codeColor, 1)};\n    }\n\n    .fai {\n        color: ${rgba(rootColors.codeColor, 1)};\n    }\n`\n\nexport default TextIconButton\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome } from '@fortawesome/free-solid-svg-icons/faHome'\nimport { faLaptopCode } from '@fortawesome/free-solid-svg-icons/faLaptopCode'\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons/faUserCircle'\nimport styled from 'styled-components'\nimport { HashLink } from 'react-router-hash-link'\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types'\nimport TextIconButton from '../styles/TextIconButton'\n\nconst NavBarSpace = styled.div`\n    position: fixed;\n    width: 98vw;\n    display: flex;\n    justify-content: flex-end;\n    padding: 4vh 1vh 1vh 0;\n    z-index: 999;\n    backdrop-filter: blur(6px);\n`\n\ninterface NavBarItems {\n    to: string\n    icon: IconDefinition\n    description: string\n    key: string\n}\n\nconst navBarItems: NavBarItems[] = [\n    { to: '/', icon: faHome, description: '. Home', key: 'intro' },\n    {\n        to: '/',\n        icon: faUserCircle,\n        description: '. About Me',\n        key: 'about_me',\n    },\n    {\n        to: '/',\n        icon: faLaptopCode,\n        description: '. Experience',\n        key: 'experience',\n    },\n]\n\nexport default function NavBar() {\n    return (\n        <NavBarSpace>\n            {navBarItems.map(item => {\n                return (\n                    <HashLink\n                        to={item.to + '#' + item.key}\n                        key={item.key}\n                        smooth\n                    >\n                        <TextIconButton>\n                            <FontAwesomeIcon icon={item.icon} className=\"fai\" />\n                            {item.description}\n                        </TextIconButton>\n                    </HashLink>\n                )\n            })}\n        </NavBarSpace>\n    )\n}\n","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom'\nimport './App.css'\nimport Home from './pages/Home'\nimport GlobalStyle from './styles/globalStyles'\nimport NavBar from './components/NavBar'\n\nfunction App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <>\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <GlobalStyle/>\n                <NavBar/>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                </Switch>\n            </>\n        </Router>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}